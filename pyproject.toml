[build-system]
requires = [
    "setuptools", 
    "wheel", 
    "numpy", 
    "meson>=0.64.0",        #build-time only
    "ninja",                #build-time only
    "meson-python>=0.13.0"  #build-time only
]
build-backend = "mesonpy"

[project]
name = "wannier-tools"
version = "0.0.2"
description = "A Python wrapper for the WannierTools code"
authors = [
    { name = "QuanSheng Wu", email = "wuquansheng@gmail.com" },
    { name = "ShengNan Zhang" },
    { name = "Hai-Feng Song" },
    { name = "Matthias Troyer" },
    { name = "Alexey A. Soluyanov" },
]
maintainers = [
    { name = "QuanSheng Wu", email = "wuquansheng@gmail.com" }
]
license = { text = "GPL-3.0-or-later" }
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "numpy>=2.0.0",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Fortran",
    "Topic :: Scientific/Engineering :: Physics",
]

[project.scripts]
wt-py = "wannier_tools.cli:main"
wt-check-deps = "wannier_tools.check_deps:main"

[project.urls]
Homepage = "https://www.wanniertools.com/"
"Bug Tracker" = "https://github.com/quanshengwu/wannier_tools/issues"

[tool.meson-python.args]
install = ["--tags=python-runtime,extension,devel,runtime,data"] 

#[tool.setuptools.packages.find]
#where = ["src"]
#namespaces = true

#[tool.setuptools.package-data]
#"wannier_tools.internal_mpi" = ["**/*"]

# cibuildwheel配置
[tool.cibuildwheel]
# 构建哪些版本
build = ["cp39-*"]
# 跳过哪些版本
skip = ["pp*", "*musllinux*"]

# 测试设置
test-command = [
    "python -c \"import wannier_tools; print('Import successful')\"",
    "python -c \"import wannier_tools; print('Version:', wannier_tools.__version__)\"",
    "python -c \"print('=== Testing wheel import and basic functionality ==='); import wannier_tools; print(f'Package location: {wannier_tools.__file__}'); print(f'Available modules: {[attr for attr in dir(wannier_tools) if not attr.startswith(\\\"_\\\")]}')\""
]
test-requires = ["pytest"]

# 环境变量在各平台特定配置中设置

# Linux特定配置
[tool.cibuildwheel.linux]
archs = ["x86_64"]
manylinux-x86_64-image = "wanniertools-builder-nompi"
environment = { FFLAGS = "-fallow-invalid-boz -fbackslash -ffree-line-length-none -fallow-argument-mismatch" }
before-build = [
    "echo 'Building Linux wheels with MPICH runtime MPI detection'",
    "echo 'Available Python versions:'",
    "ls /opt/python/"
]

# macOS特定配置 - 支持三种架构
[tool.cibuildwheel.macos] 
# macOS build environment is configured in CI workflow for better control
archs = ["x86_64", "arm64"]
environment = {}

# Windows特定配置 - 静态链接策略避免DLL冲突
[tool.cibuildwheel.windows]
archs = ["AMD64"]
environment = { FC = "gfortran", CC = "gcc", CXX = "g++", FFLAGS = "-fallow-invalid-boz -fbackslash -ffree-line-length-none -fallow-argument-mismatch -static-libgfortran -static-libgcc -O2", CFLAGS = "-static-libgcc -O2", CXXFLAGS = "-static-libgcc -static-libstdc++ -O2", LDFLAGS = "-static-libgfortran -static-libgcc -Wl,--allow-multiple-definition", OPENBLAS_NUM_THREADS = "1", OMP_NUM_THREADS = "1", MKL_NUM_THREADS = "1", BLAS = "None", LAPACK = "None", PATH = "C:\\msys64\\mingw64\\bin;${PATH}" }
before-build = [
    "echo === Windows Static Build Strategy ===",
    "pip install delvewheel -q",
    "pip install ninja -q",
    "echo Installing latest MSYS2 toolchain...",
    "C:\\msys64\\usr\\bin\\pacman.exe -Syu --noconfirm",
    "C:\\msys64\\usr\\bin\\pacman.exe -S --noconfirm mingw-w64-x86_64-gcc-fortran mingw-w64-x86_64-gcc mingw-w64-x86_64-openblas mingw-w64-x86_64-arpack",
    "echo Verifying toolchain...",
    "gfortran --version",
    "gcc --version",
    "echo Cleaning potential DLL conflicts...",
    "if exist C:\\msys64\\mingw64\\bin\\libgcc_s_seh-1.dll del /f /q C:\\msys64\\mingw64\\bin\\libgcc_s_seh-1.dll",
    #"if exist C:\\msys64\\mingw64\\bin\\libgomp-1.dll del /f /q C:\\msys64\\mingw64\\bin\\libgomp-1.dll",
    #"if exist C:\\msys64\\mingw64\\bin\\libwinpthread-1.dll del /f /q C:\\msys64\\mingw64\\bin\\libwinpthread-1.dll",
    "echo Checking for OpenBLAS libraries...",
    "dir C:\\msys64\\mingw64\\lib\\*openblas*.a",
    "echo [OK] Latest static build toolchain ready"
]
repair-wheel-command = [
    "delvewheel repair --add-path C:\\msys64\\mingw64\\bin --no-dll libgcc_s_seh-1.dll -w {dest_dir} {wheel}",
    "echo === Final wheel contents ===",
    "python -c \"import zipfile, sys; z=zipfile.ZipFile('{dest_dir}/' + [f for f in __import__('os').listdir('{dest_dir}') if f.endswith('.whl')][0]); [print(f'{info.filename:<60} {info.file_size:>10} bytes') for info in z.infolist()]; print(f'Total files: {len(z.infolist())}, Total size: {sum(info.file_size for info in z.infolist()):,} bytes')\""
] 