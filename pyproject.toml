[build-system]
requires = [
    "setuptools", 
    "wheel", 
    "numpy", 
    "meson>=0.64.0",        #build-time only
    "ninja",                #build-time only
    "meson-python>=0.13.0"  #build-time only
]
build-backend = "mesonpy"

[project]
name = "wannier-tools"
version = "0.0.2"
description = "A Python wrapper for the WannierTools code"
authors = [
    { name = "QuanSheng Wu", email = "wuquansheng@gmail.com" },
    { name = "ShengNan Zhang" },
    { name = "Hai-Feng Song" },
    { name = "Matthias Troyer" },
    { name = "Alexey A. Soluyanov" },
]
maintainers = [
    { name = "QuanSheng Wu", email = "wuquansheng@gmail.com" }
]
license = { text = "GPL-3.0-or-later" }
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "numpy>=2.0.0",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Fortran",
    "Topic :: Scientific/Engineering :: Physics",
]

[project.scripts]
wt-py = "wannier_tools.cli:main"
wt-check-deps = "wannier_tools.check_deps:main"

[project.urls]
Homepage = "https://www.wanniertools.com/"
"Bug Tracker" = "https://github.com/quanshengwu/wannier_tools/issues"

[tool.meson-python.args]
install = ["--tags=python-runtime,extension,devel,runtime,data"] 

#[tool.setuptools.packages.find]
#where = ["src"]
#namespaces = true

#[tool.setuptools.package-data]
#"wannier_tools.internal_mpi" = ["**/*"]

# cibuildwheel配置
[tool.cibuildwheel]
# 构建哪些版本
build = ["cp310-*"]
# 跳过哪些版本
skip = ["pp*", "*musllinux*"]

# 测试设置
test-command = [
    "python -c \"import wannier_tools; print('Import successful')\"",
    "python -c \"import wannier_tools; print('Version:', wannier_tools.__version__)\""
]
test-requires = ["pytest"]

# 环境变量在各平台特定配置中设置

# Linux特定配置
[tool.cibuildwheel.linux]
archs = ["x86_64"]
manylinux-x86_64-image = "wanniertools-builder-nompi"
environment = { FFLAGS = "-fallow-invalid-boz -fbackslash -ffree-line-length-none -fallow-argument-mismatch" }
before-build = [
    "echo 'Building Linux wheels with MPICH runtime MPI detection'",
    "echo 'Available Python versions:'",
    "ls /opt/python/"
]

# macOS特定配置 - 支持三种架构
[tool.cibuildwheel.macos] 
# macOS build environment is configured in CI workflow for better control
archs = ["x86_64", "arm64"]
environment = {}

# Windows特定配置
[tool.cibuildwheel.windows]
archs = ["AMD64"]
environment = { FC = "gfortran", CC = "gcc", CXX = "g++", FFLAGS = "-fallow-invalid-boz -fbackslash -ffree-line-length-none -fallow-argument-mismatch", OPENBLAS_NUM_THREADS = "1", OMP_NUM_THREADS = "1" }
before-build = [
    "echo Installing Windows wheels with hybrid gfortran+MS-MPI compatibility",
    "pip install delvewheel -q",
    "echo Installing MSYS2 gfortran-compatible libraries...",
    "C:\\msys64\\usr\\bin\\pacman.exe -S --noconfirm mingw-w64-x86_64-openblas",
    "echo Installing MSYS2 gfortran-compatible MS-MPI development libraries...",
    "C:\\msys64\\usr\\bin\\pacman.exe -S --noconfirm mingw-w64-x86_64-msmpi",
    "echo Installing official MS-MPI Runtime for mpiexec.exe...",
    "powershell -Command \"Invoke-WebRequest -Uri 'https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisetup.exe' -OutFile 'msmpisetup.exe'\"",
    "powershell -Command \"Start-Process -FilePath '.\\msmpisetup.exe' -ArgumentList '-unattend' -Wait -NoNewWindow\"",
    "echo Configuring hybrid environment: MSYS2 PATH + MS-MPI Runtime...",
    "set PATH=C:\\msys64\\mingw64\\bin;C:\\Program Files\\Microsoft MPI\\Bin;%PATH%",
    "echo Verifying gfortran-compatible MPI headers and libraries...",
    "dir C:\\msys64\\mingw64\\include\\mpi.h",
    "dir C:\\msys64\\mingw64\\lib\\libmsmpi.dll.a",
    "echo Verifying MS-MPI runtime (mpiexec.exe)...",
    "powershell -Command \"& \\\"$env:ProgramFiles\\Microsoft MPI\\Bin\\mpiexec.exe\\\" -help | Select-Object -First 5\"",
    "echo [OK] Hybrid compatibility configured: gfortran libs + MS-MPI runtime"
]
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel} --add-path C:\\msys64\\mingw64\\bin" 