[build-system]
requires = [
    "setuptools", 
    "wheel", 
    "numpy", 
    "meson>=0.64.0",        #build-time only
    "ninja",                #build-time only
    "meson-python>=0.13.0"  #build-time only
]
build-backend = "mesonpy"

[project]
name = "wannier-tools"
version = "0.0.2"
description = "A Python wrapper for the WannierTools code"
authors = [
    { name = "QuanSheng Wu", email = "wuquansheng@gmail.com" },
    { name = "ShengNan Zhang" },
    { name = "Hai-Feng Song" },
    { name = "Matthias Troyer" },
    { name = "Alexey A. Soluyanov" },
]
maintainers = [
    { name = "QuanSheng Wu", email = "wuquansheng@gmail.com" }
]
license = { text = "GPL-3.0-or-later" }
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "numpy",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Fortran",
    "Topic :: Scientific/Engineering :: Physics",
]

[project.scripts]
wt-py = "wannier_tools.cli:main"
wt-check-deps = "wannier_tools.check_deps:main"

[project.urls]
Homepage = "https://www.wanniertools.com/"
"Bug Tracker" = "https://github.com/quanshengwu/wannier_tools/issues"

[tool.meson-python.args]
install = ["--tags=python-runtime,extension,devel,runtime,data"] 

#[tool.setuptools.packages.find]
#where = ["src"]
#namespaces = true

#[tool.setuptools.package-data]
#"wannier_tools.internal_mpi" = ["**/*"]

# cibuildwheel配置
[tool.cibuildwheel]
# 构建哪些版本
build = ["cp39-*"]
# 跳过哪些版本
skip = ["pp*", "*musllinux*"]

# 测试设置
test-command = [
    "python -c \"import wannier_tools; print('Import successful')\"",
    "python -c \"import wannier_tools; print('Version:', wannier_tools.__version__)\"",
    "python -c \"print('=== Testing wheel import and basic functionality ==='); import wannier_tools; print(f'Package location: {wannier_tools.__file__}'); print(f'Available modules: {[attr for attr in dir(wannier_tools) if not attr.startswith(\\\"_\\\")]}')\""
]
test-requires = ["pytest"]

# 环境变量在各平台特定配置中设置

# Linux特定配置
[tool.cibuildwheel.linux]
archs = ["x86_64"]
manylinux-x86_64-image = "wanniertools-builder-nompi"
environment = { FFLAGS = "-fallow-invalid-boz -fbackslash -ffree-line-length-none -fallow-argument-mismatch" }
before-build = [
    "echo 'Building Linux wheels with MPICH runtime MPI detection'",
    "echo 'Available Python versions:'",
    "ls /opt/python/",
    "echo 'Parallel build configuration:'",
    "echo 'Available CPU cores:' $(nproc)",
    "echo 'MAKEFLAGS:' $MAKEFLAGS"
]

# macOS特定配置 - 支持三种架构
[tool.cibuildwheel.macos] 
# macOS build environment is configured in CI workflow for better control
archs = ["x86_64", "arm64"]
environment = { MAKEFLAGS = "-j$(sysctl -n hw.ncpu)", NINJA_STATUS = "[%f/%t] " }

# Windows特定配置
[tool.cibuildwheel.windows]
archs = ["AMD64"]
environment = { FC = "C:\\\\msys64\\\\ucrt64\\\\bin\\\\gfortran.exe", CC = "C:\\\\msys64\\\\ucrt64\\\\bin\\\\gcc.exe", CXX = "C:\\\\msys64\\\\ucrt64\\\\bin\\\\g++.exe", FFLAGS = "-fallow-invalid-boz -fbackslash -ffree-line-length-none -fallow-argument-mismatch -O2", CFLAGS = "-O2", CXXFLAGS = "-O2", LDFLAGS = "-Wl,--allow-multiple-definition -lmsmpi", OPENBLAS_NUM_THREADS = "1", OMP_NUM_THREADS = "1", MKL_NUM_THREADS = "1", BLAS = "None", LAPACK = "None", PATH = "C:\\\\msys64\\\\ucrt64\\\\bin;${PATH}" }
before-build = [
    "echo === Windows Static Build Strategy with MPI Support ===",
    "pip install delvewheel -q",
    "pip install ninja -q",

    "echo Installing latest MSYS2 UCRT64 toolchain...",
    "C:\\msys64\\usr\\bin\\pacman.exe -Syu --noconfirm",
    "C:\\msys64\\usr\\bin\\pacman.exe -S --noconfirm mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-gcc-fortran mingw-w64-ucrt-x86_64-openblas mingw-w64-ucrt-x86_64-arpack",

    "echo === Installing Microsoft MPI v10.1.3 (Direct Download) ===",
    "echo Downloading MS-MPI Runtime and SDK from Microsoft...",
    "powershell -Command \"$ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest 'https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisetup.exe' -OutFile msmpisetup.exe\"",
    "powershell -Command \"$ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest 'https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisdk.msi' -OutFile msmpisdk.msi\"",
    "echo Installing MS-MPI Runtime (contains msmpi.dll and mpiexec.exe)...",
    "start /wait msmpisetup.exe /quiet",
    "echo Installing MS-MPI SDK (headers and libraries)...",
    "start /wait msiexec /i msmpisdk.msi /quiet /norestart",
    "echo Cleaning up installers...",
    "del msmpisetup.exe 2>nul",
    "del msmpisdk.msi 2>nul",
    "echo === Microsoft MPI Installation Complete ===",

    "echo === Setting up build environment variables for MPI ===",
    "echo Detecting Microsoft MPI installation paths...",
    "if exist \"C:\\Program Files\\Microsoft MPI\\Bin\" ( set \"MSMPI_BIN=C:\\Program Files\\Microsoft MPI\\Bin\" ) else ( set \"MSMPI_BIN=C:\\Program Files (x86)\\Microsoft MPI\\Bin\" )",
    "if exist \"C:\\Program Files (x86)\\Microsoft SDKs\\MPI\\Include\" ( set \"MSMPI_INC=C:\\Program Files (x86)\\Microsoft SDKs\\MPI\\Include\" ) else ( set \"MSMPI_INC=C:\\Program Files\\Microsoft MPI\\Include\" )",
    "if exist \"C:\\Program Files (x86)\\Microsoft SDKs\\MPI\\Lib\\x64\" ( set \"MSMPI_LIB64=C:\\Program Files (x86)\\Microsoft SDKs\\MPI\\Lib\\x64\" ) else ( set \"MSMPI_LIB64=C:\\Program Files\\Microsoft MPI\\Lib\\x64\" )",
    "echo Located MS-MPI: BIN=%MSMPI_BIN%, INC=%MSMPI_INC%, LIB64=%MSMPI_LIB64%",
    "set \"PATH=%MSMPI_BIN%;%PATH%\"",
    "set \"CPATH=%MSMPI_INC%\"",
    "set \"LIBRARY_PATH=%MSMPI_LIB64%;C:\\msys64\\ucrt64\\lib\"",

    "echo Verifying toolchain and MPI installation...",
    "gfortran --version",
    "gcc --version",
    "echo Checking MPI installation...",
    "where mpiexec 2>nul || echo [WARNING] mpiexec not found in PATH",
    "if not exist \"%MSMPI_BIN%\\msmpi.dll\" ( echo [ERROR] msmpi.dll not found! Listing available files: && dir /b \"%MSMPI_BIN%\\*.dll\" 2>nul ) else ( echo [OK] msmpi.dll found at %MSMPI_BIN%\\msmpi.dll )",
    "if not exist \"%MSMPI_INC%\\mpi.h\" ( echo [WARNING] mpi.h not found at %MSMPI_INC% ) else ( echo [OK] mpi.h found )",
    "if not exist \"%MSMPI_INC%\\mpif.h\" ( echo [WARNING] mpif.h not found at %MSMPI_INC% ) else ( echo [OK] mpif.h found )",
    "if not exist \"%MSMPI_LIB64%\\msmpi.lib\" ( echo [WARNING] msmpi.lib not found at %MSMPI_LIB64% && dir /b \"%MSMPI_LIB64%\\*.lib\" 2>nul ) else ( echo [OK] msmpi.lib found )",
    "echo [OK] Latest static build toolchain ready with MPI and parallel support"
]
repair-wheel-command = [
    "delvewheel repair --add-path C:\\msys64\\ucrt64\\bin -w {dest_dir} {wheel}",
    "echo === Injecting MS-MPI into Windows wheel ===",
    "python -c \"",
    "import zipfile, tempfile, shutil, os",
    "from pathlib import Path",
    "",
    "# 找到修复后的wheel文件",
    "dest_dir = Path(r'{dest_dir}')",
    "wheel_file = next(dest_dir.glob('*.whl'))",
    "print(f'Processing wheel: {wheel_file}')",
    "",
    "# 创建临时目录",
    "with tempfile.TemporaryDirectory() as temp_dir:",
    "    temp_path = Path(temp_dir)",
    "    ",
    "    # 解压wheel",
    "    with zipfile.ZipFile(wheel_file, 'r') as z:",
    "        z.extractall(temp_path)",
    "    ",
    "    # 创建MPI目录结构",
    "    mpi_dir = temp_path / 'wannier_tools' / 'internal_mpi' / 'windows_amd64'",
    "    (mpi_dir / 'bin').mkdir(parents=True, exist_ok=True)",
    "    (mpi_dir / 'lib').mkdir(parents=True, exist_ok=True)",
    "    (mpi_dir / 'include').mkdir(parents=True, exist_ok=True)",
    "    ",
    "    # 复制MS-MPI文件",
    "    # Microsoft MPI 标准安装路径",
    "    msmpi_bin = Path('C:/Program Files/Microsoft MPI/Bin')",
    "    msmpi_lib = Path('C:/Program Files (x86)/Microsoft SDKs/MPI/Lib/x64')",
    "    msmpi_inc = Path('C:/Program Files (x86)/Microsoft SDKs/MPI/Include')",
    "    ",
    "    # 如果标准路径不存在，尝试备用路径",
    "    if not msmpi_bin.exists():",
    "        msmpi_bin = Path('C:/Program Files (x86)/Microsoft MPI/Bin')",
    "    if not msmpi_lib.exists():",
    "        msmpi_lib = Path('C:/Program Files/Microsoft MPI/Lib/x64')",
    "    if not msmpi_inc.exists():",
    "        msmpi_inc = Path('C:/Program Files/Microsoft MPI/Include')",
    "    ",
    "    print(f'Using MS-MPI from: {msmpi_bin.parent}')",
    "    ",
    "    # 复制关键的MPI可执行文件",
    "    critical_executables = ['mpiexec.exe', 'msmpi.dll']",
    "    for exe_name in critical_executables:",
    "        exe_file = msmpi_bin / exe_name",
    "        if exe_file.exists():",
    "            shutil.copy2(exe_file, mpi_dir / 'bin')",
    "            print(f'Copied critical bin: {exe_name}')",
    "        else:",
    "            print(f'[WARNING] Critical file not found: {exe_name}')",
    "    ",
    "    # 复制所有MPI相关的可执行文件和DLL",
    "    for f in msmpi_bin.glob('*'):",
    "        if f.is_file() and f.suffix.lower() in ['.exe', '.dll']:",
    "            shutil.copy2(f, mpi_dir / 'bin')",
    "            print(f'Copied bin: {f.name}')",
    "    ",
    "    # 复制MPI库文件",
    "    for f in msmpi_lib.glob('*.lib'):",
    "        if f.is_file():",
    "            shutil.copy2(f, mpi_dir / 'lib')",
    "            print(f'Copied lib: {f.name}')",
    "    ",
    "    # 复制MPI头文件",
    "    for f in msmpi_inc.glob('*'):",
    "        if f.is_file():",
    "            shutil.copy2(f, mpi_dir / 'include')",
    "            print(f'Copied include: {f.name}')",
    "        elif f.is_dir():",
    "            shutil.copytree(f, mpi_dir / 'include' / f.name, dirs_exist_ok=True)",
    "            print(f'Copied include dir: {f.name}')",
    "    ",
    "    # 重新打包wheel",
    "    with zipfile.ZipFile(wheel_file, 'w', zipfile.ZIP_DEFLATED) as z:",
    "        for file_path in temp_path.rglob('*'):",
    "            if file_path.is_file():",
    "                arcname = file_path.relative_to(temp_path)",
    "                z.write(file_path, arcname)",
    "    ",
    "    print(f'✅ MS-MPI injected into {wheel_file.name}')",
    "\"",
    "echo === Final wheel contents ===",
    "python -c \"from pathlib import Path; import zipfile; d=Path(r'{dest_dir}'); w=next(d.glob('*.whl')); z=zipfile.ZipFile(w); [print(f'{i.filename:<60} {i.file_size:>10} bytes') for i in z.infolist()]; print(f'Total files: {len(z.infolist())}, Total size: {sum(i.file_size for i in z.infolist()):,} bytes')\""
]