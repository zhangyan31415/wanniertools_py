[build-system]
requires = [
    "setuptools", 
    "wheel", 
    "numpy", 
    "meson>=0.64.0",        #build-time only
    "ninja",                #build-time only
    "meson-python>=0.13.0"  #build-time only
]
build-backend = "mesonpy"

[project]
name = "wannier-tools"
version = "0.0.2"
description = "A Python wrapper for the WannierTools code"
authors = [
    { name = "QuanSheng Wu", email = "wuquansheng@gmail.com" },
    { name = "ShengNan Zhang" },
    { name = "Hai-Feng Song" },
    { name = "Matthias Troyer" },
    { name = "Alexey A. Soluyanov" },
]
maintainers = [
    { name = "QuanSheng Wu", email = "wuquansheng@gmail.com" }
]
license = { text = "GPL-3.0-or-later" }
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "numpy",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Fortran",
    "Topic :: Scientific/Engineering :: Physics",
]

[project.scripts]
wt-py = "wannier_tools.cli:main"
wt-check-deps = "wannier_tools.check_deps:main"

[project.urls]
Homepage = "https://www.wanniertools.com/"
"Bug Tracker" = "https://github.com/quanshengwu/wannier_tools/issues"

[tool.meson-python.args]
install = ["--tags=python-runtime,extension,devel,runtime,data"] 

#[tool.setuptools.packages.find]
#where = ["src"]
#namespaces = true

#[tool.setuptools.package-data]
#"wannier_tools.internal_mpi" = ["**/*"]

# cibuildwheel配置
[tool.cibuildwheel]
# 构建哪些版本
build = ["cp39-*"]
# 跳过哪些版本
skip = ["pp*", "*musllinux*"]

# 测试设置
test-command = [
    "python -c \"import wannier_tools; print('Import successful')\"",
    "python -c \"import wannier_tools; print('Version:', wannier_tools.__version__)\"",
    "python -c \"print('=== Testing wheel import and basic functionality ==='); import wannier_tools; print(f'Package location: {wannier_tools.__file__}'); print(f'Available modules: {[attr for attr in dir(wannier_tools) if not attr.startswith(\\\"_\\\")]}')\""
]
test-requires = ["pytest"]

# 环境变量在各平台特定配置中设置

# Linux特定配置
[tool.cibuildwheel.linux]
archs = ["x86_64"]
manylinux-x86_64-image = "wanniertools-builder-nompi"
environment = { FFLAGS = "-fallow-invalid-boz -fbackslash -ffree-line-length-none -fallow-argument-mismatch" }
before-build = [
    "echo 'Building Linux wheels with MPICH runtime MPI detection'",
    "echo 'Available Python versions:'",
    "ls /opt/python/",
    "echo 'Parallel build configuration:'",
    "echo 'Available CPU cores:' $(nproc)",
    "echo 'MAKEFLAGS:' $MAKEFLAGS"
]

# macOS特定配置 - 支持三种架构
[tool.cibuildwheel.macos] 
# macOS build environment is configured in CI workflow for better control
archs = ["x86_64", "arm64"]
environment = { MAKEFLAGS = "-j$(sysctl -n hw.ncpu)", NINJA_STATUS = "[%f/%t] " }

# Windows特定配置
[tool.cibuildwheel.windows]
archs = ["AMD64"]
environment = { FC = "C:\\\\msys64\\\\ucrt64\\\\bin\\\\gfortran.exe", CC = "C:\\\\msys64\\\\ucrt64\\\\bin\\\\gcc.exe", CXX = "C:\\\\msys64\\\\ucrt64\\\\bin\\\\g++.exe", FFLAGS = "-fallow-invalid-boz -fbackslash -ffree-line-length-none -fallow-argument-mismatch -O2 -IC:\\\\msys64\\\\ucrt64\\\\include", CFLAGS = "-O2 -IC:\\\\msys64\\\\ucrt64\\\\include", CXXFLAGS = "-O2 -IC:\\\\msys64\\\\ucrt64\\\\include", LDFLAGS = "-LC:\\\\msys64\\\\ucrt64\\\\lib -Wl,--allow-multiple-definition -lmsmpi", OPENBLAS_NUM_THREADS = "1", OMP_NUM_THREADS = "1", MKL_NUM_THREADS = "1", BLAS = "None", LAPACK = "None", PATH = "C:\\\\msys64\\\\ucrt64\\\\bin;${PATH}" }
before-build = [
    "echo === Windows Static Build Strategy with MPI Support ===",
    "pip install delvewheel -q",
    "pip install ninja -q",
    "echo Installing latest MSYS2 UCRT64 toolchain with MPI...",
    "C:\\msys64\\usr\\bin\\pacman.exe -Syu --noconfirm",
    "C:\\msys64\\usr\\bin\\pacman.exe -S --noconfirm mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-gcc-fortran mingw-w64-ucrt-x86_64-openblas mingw-w64-ucrt-x86_64-arpack mingw-w64-ucrt-x86_64-msmpi",
    "echo Verifying toolchain and MPI installation...",
    "gfortran --version",
    "gcc --version",
    "echo Checking MPI installation...",
    "where mpiexec 2>nul || echo MPI not found in PATH",
    "dir C:\\msys64\\ucrt64\\bin\\*mpi* 2>nul || echo No MPI executables found",
    "dir C:\\msys64\\ucrt64\\lib\\*mpi* 2>nul || echo No MPI libraries found",
    "dir C:\\msys64\\ucrt64\\include\\mpi.h 2>nul || echo MPI header not found",
    "dir C:\\msys64\\ucrt64\\include\\mpif.h 2>nul || echo MPI Fortran header not found",
    "echo Parallel build configuration:",
    "echo Available CPU cores: %NUMBER_OF_PROCESSORS%",
    "echo MAKEFLAGS: %MAKEFLAGS%",
    "echo Checking for OpenBLAS libraries...",
    "dir C:\\msys64\\ucrt64\\lib\\*openblas*.a",
    "echo [OK] Latest static build toolchain ready with MPI and parallel support"
]
repair-wheel-command = [
    "delvewheel repair --add-path C:\\msys64\\ucrt64\\bin -w {dest_dir} {wheel}",
    "echo === Injecting MS-MPI into Windows wheel ===",
    "python -c \"",
    "import zipfile, tempfile, shutil, os",
    "from pathlib import Path",
    "",
    "# 找到修复后的wheel文件",
    "dest_dir = Path(r'{dest_dir}')",
    "wheel_file = next(dest_dir.glob('*.whl'))",
    "print(f'Processing wheel: {wheel_file}')",
    "",
    "# 创建临时目录",
    "with tempfile.TemporaryDirectory() as temp_dir:",
    "    temp_path = Path(temp_dir)",
    "    ",
    "    # 解压wheel",
    "    with zipfile.ZipFile(wheel_file, 'r') as z:",
    "        z.extractall(temp_path)",
    "    ",
    "    # 创建MPI目录结构",
    "    mpi_dir = temp_path / 'wannier_tools' / 'internal_mpi' / 'windows_amd64'",
    "    (mpi_dir / 'bin').mkdir(parents=True, exist_ok=True)",
    "    (mpi_dir / 'lib').mkdir(parents=True, exist_ok=True)",
    "    (mpi_dir / 'include').mkdir(parents=True, exist_ok=True)",
    "    ",
    "    # 复制MS-MPI文件",
    "    msmpi_bin = Path('C:/msys64/ucrt64/bin')",
    "    msmpi_lib = Path('C:/msys64/ucrt64/lib')",
    "    msmpi_inc = Path('C:/msys64/ucrt64/include')",
    "    ",
    "    # 复制MPI相关的可执行文件",
    "    for pattern in ['*mpi*', '*MPI*']:",
    "        for f in msmpi_bin.glob(pattern):",
    "            if f.is_file():",
    "                shutil.copy2(f, mpi_dir / 'bin')",
    "                print(f'Copied bin: {f.name}')",
    "    ",
    "    # 复制MPI库文件",
    "    for pattern in ['*mpi*', '*MPI*']:",
    "        for f in msmpi_lib.glob(pattern):",
    "            if f.is_file():",
    "                shutil.copy2(f, mpi_dir / 'lib')",
    "                print(f'Copied lib: {f.name}')",
    "    ",
    "    # 复制MPI头文件",
    "    for pattern in ['*mpi*', '*MPI*']:",
    "        for f in msmpi_inc.glob(pattern):",
    "            if f.is_file():",
    "                shutil.copy2(f, mpi_dir / 'include')",
    "                print(f'Copied include: {f.name}')",
    "            elif f.is_dir():",
    "                shutil.copytree(f, mpi_dir / 'include' / f.name, dirs_exist_ok=True)",
    "                print(f'Copied include dir: {f.name}')",
    "    ",
    "    # 重新打包wheel",
    "    with zipfile.ZipFile(wheel_file, 'w', zipfile.ZIP_DEFLATED) as z:",
    "        for file_path in temp_path.rglob('*'):",
    "            if file_path.is_file():",
    "                arcname = file_path.relative_to(temp_path)",
    "                z.write(file_path, arcname)",
    "    ",
    "    print(f'✅ MS-MPI injected into {wheel_file.name}')",
    "\"",
    "echo === Final wheel contents ===",
    "python -c \"from pathlib import Path; import zipfile; d=Path(r'{dest_dir}'); w=next(d.glob('*.whl')); z=zipfile.ZipFile(w); [print(f'{i.filename:<60} {i.file_size:>10} bytes') for i in z.infolist()]; print(f'Total files: {len(z.infolist())}, Total size: {sum(i.file_size for i in z.infolist()):,} bytes')\""
]