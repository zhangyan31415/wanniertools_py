[build-system]
requires = [
    "setuptools", 
    "wheel", 
    "numpy", 
    "meson>=0.64.0",        #build-time only
    "ninja",                #build-time only
    "meson-python>=0.13.0"  #build-time only
]
build-backend = "mesonpy"

[project]
name = "wannier-tools"
version = "0.0.2"
description = "A Python wrapper for the WannierTools code"
authors = [
    { name = "QuanSheng Wu", email = "wuquansheng@gmail.com" },
    { name = "ShengNan Zhang" },
    { name = "Hai-Feng Song" },
    { name = "Matthias Troyer" },
    { name = "Alexey A. Soluyanov" },
]
maintainers = [
    { name = "QuanSheng Wu", email = "wuquansheng@gmail.com" }
]
license = { text = "GPL-3.0-or-later" }
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "numpy",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Fortran",
    "Topic :: Scientific/Engineering :: Physics",
]

[project.scripts]
wt-py = "wannier_tools.cli:main"
wt-check-deps = "wannier_tools.check_deps:main"

[project.urls]
Homepage = "https://www.wanniertools.com/"
"Bug Tracker" = "https://github.com/quanshengwu/wannier_tools/issues"

[tool.meson-python.args]
install = ["--tags=python-runtime,extension,devel,runtime,data"] 

#[tool.setuptools.packages.find]
#where = ["src"]
#namespaces = true

#[tool.setuptools.package-data]
#"wannier_tools.internal_mpi" = ["**/*"]

# cibuildwheel配置
[tool.cibuildwheel]
# 构建哪些版本
build = ["cp39-*"]
# 跳过哪些版本
skip = ["pp*", "*musllinux*"]

# 测试设置
test-command = [
    "python -c \"import wannier_tools; print('Import successful')\"",
    "python -c \"import wannier_tools; print('Version:', wannier_tools.__version__)\"",
    "python -c \"print('=== Testing wheel import and basic functionality ==='); import wannier_tools; print(f'Package location: {wannier_tools.__file__}'); print(f'Available modules: {[attr for attr in dir(wannier_tools) if not attr.startswith(\\\"_\\\")]}')\""
]
test-requires = ["pytest"]

# 环境变量在各平台特定配置中设置

# Linux特定配置
[tool.cibuildwheel.linux]
archs = ["x86_64"]
manylinux-x86_64-image = "wanniertools-builder-nompi"
environment = { FFLAGS = "-fallow-invalid-boz -fbackslash -ffree-line-length-none -fallow-argument-mismatch" }
before-build = [
    "echo 'Building Linux wheels with MPICH runtime MPI detection'",
    "echo 'Available Python versions:'",
    "ls /opt/python/",
    "echo 'Parallel build configuration:'",
    "echo 'Available CPU cores:' $(nproc)",
    "echo 'MAKEFLAGS:' $MAKEFLAGS"
]

# macOS特定配置 - 支持三种架构
[tool.cibuildwheel.macos] 
# macOS build environment is configured in CI workflow for better control
archs = ["x86_64", "arm64"]
environment = { MAKEFLAGS = "-j$(sysctl -n hw.ncpu)", NINJA_STATUS = "[%f/%t] " }

# Windows特定配置
[tool.cibuildwheel.windows]
archs = ["AMD64"]
environment = { FC = "C:\\\\msys64\\\\ucrt64\\\\bin\\\\gfortran.exe", CC = "C:\\\\msys64\\\\ucrt64\\\\bin\\\\gcc.exe", CXX = "C:\\\\msys64\\\\ucrt64\\\\bin\\\\g++.exe", FFLAGS = "-fallow-invalid-boz -fbackslash -ffree-line-length-none -fallow-argument-mismatch -O2", CFLAGS = "-O2", CXXFLAGS = "-O2", LDFLAGS = "-LC:\\\\msys64\\\\ucrt64\\\\lib -Wl,--allow-multiple-definition", OPENBLAS_NUM_THREADS = "1", OMP_NUM_THREADS = "1", MKL_NUM_THREADS = "1", BLAS = "None", LAPACK = "None", PATH = "C:\\\\msys64\\\\ucrt64\\\\bin;${PATH}" }
before-build = [
    "windows_setup.bat",
    "python -c \"import zipfile, tempfile, shutil, os; from pathlib import Path; dest_dir = Path(r'{dest_dir}'); wheel_file = next(dest_dir.glob('*.whl')); print(f'Processing wheel: {wheel_file}'); exec('''\\nwith tempfile.TemporaryDirectory() as temp_dir:\\n    temp_path = Path(temp_dir)\\n    with zipfile.ZipFile(wheel_file, 'r') as z:\\n        z.extractall(temp_path)\\n    mpi_dir = temp_path / 'wannier_tools' / 'internal_mpi' / 'windows_amd64'\\n    (mpi_dir / 'bin').mkdir(parents=True, exist_ok=True)\\n    (mpi_dir / 'lib').mkdir(parents=True, exist_ok=True)\\n    (mpi_dir / 'include').mkdir(parents=True, exist_ok=True)\\n    msmpi_bin_path = Path('C:/Program Files/Microsoft MPI/Bin')\\n    if not msmpi_bin_path.exists():\\n        msmpi_bin_path = Path('C:/Program Files (x86)/Microsoft MPI/Bin')\\n    if not msmpi_bin_path.exists():\\n        msmpi_bin_path = Path('C:/Windows/System32')\\n    print(f'Using MS-MPI DLL from: {msmpi_bin_path.parent}')\\n    msmpi_dll_file = msmpi_bin_path / 'msmpi.dll'\\n    if msmpi_dll_file.exists():\\n        shutil.copy2(msmpi_dll_file, mpi_dir / 'bin')\\n        print(f'Copied msmpi.dll')\\n    else:\\n        print('[WARNING] msmpi.dll not found')\\n    with zipfile.ZipFile(wheel_file, 'w', zipfile.ZIP_DEFLATED) as z:\\n        for file_path in temp_path.rglob('*'):\\n            if file_path.is_file():\\n                arcname = file_path.relative_to(temp_path)\\n                z.write(file_path, arcname)\\n    print(f'✅ MS-MPI DLL injected into {wheel_file.name}')\\n''')\"",
    "echo === Final wheel contents ==="
]