name: Windows DLLÂÜ≤Á™ÅÊ£ÄÊµã‰∏éË∞ÉËØï

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      debug_level:
        description: 'Ë∞ÉËØïÁ∫ßÂà´'
        required: false
        default: 'standard'
        type: choice
        options:
        - standard
        - detailed
        - full

env:
  PYTHONFAULTHANDLER: 1
  PYTHONDEVMODE: 1
  CIBUILDWHEEL_BUILD: cp39-win_amd64

jobs:
  windows-dll-analysis:
    name: Windows DLLÂÜ≤Á™ÅÂàÜÊûê
    runs-on: windows-latest
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        architecture: ["x64"]
    
    steps:
    - name: Ê£ÄÂá∫‰ª£Á†Å
      uses: actions/checkout@v4
      
    - name: ËÆæÁΩÆPython ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}
        
    - name: ËÆæÁΩÆMSYS2ÁéØÂ¢É
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-openblas
          mingw-w64-x86_64-lapack
          mingw-w64-x86_64-arpack
          mingw-w64-x86_64-ninja
          
    - name: Ê∑ªÂä†MSYS2Âà∞PATH
      run: |
        echo "C:\msys64\mingw64\bin" >> $GITHUB_PATH
        echo "C:\msys64\usr\bin" >> $GITHUB_PATH
      shell: bash
      
    - name: ÂÆâË£ÖPython‰æùËµñ
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        pip install meson ninja meson-python
        pip install numpy>=2.0.0
        
    - name: Ê£ÄÊü•Á≥ªÁªüÁéØÂ¢É
      run: |
        Write-Host "=== Á≥ªÁªüÁéØÂ¢ÉÊ£ÄÊü• ===" -ForegroundColor Cyan
        Write-Host "PythonÁâàÊú¨:" (python --version)
        Write-Host "GCCÁâàÊú¨:" (gcc --version | Select-Object -First 1)
        Write-Host "GfortranÁâàÊú¨:" (gfortran --version | Select-Object -First 1)
        Write-Host "PATHÁéØÂ¢ÉÂèòÈáèÂâç10‰∏™ÁõÆÂΩï:"
        $env:PATH -split ';' | Select-Object -First 10 | ForEach-Object { Write-Host "  $_" }
        
        Write-Host "`n=== ÂÖ≥ÈîÆDLLÊ£ÄÊü• ===" -ForegroundColor Cyan
        $criticalDlls = @("libgfortran-5.dll", "libgcc_s_seh-1.dll", "libwinpthread-1.dll", "libopenblas.dll")
        foreach ($dll in $criticalDlls) {
            $found = where.exe $dll 2>$null
            if ($found) {
                Write-Host "‚úì $dll -> $found" -ForegroundColor Green
            } else {
                Write-Host "? $dll Êú™ÊâæÂà∞" -ForegroundColor Yellow
            }
        }
      shell: pwsh
      
    - name: ÊûÑÂª∫wannier-tools
      run: |
        Write-Host "=== ÂºÄÂßãÊûÑÂª∫wannier-tools ===" -ForegroundColor Cyan
        
        $env:FC = "gfortran"
        $env:CC = "gcc" 
        $env:CXX = "g++"
        
        try {
            pip install . --no-cache-dir -v
            Write-Host "‚úì ÊûÑÂª∫ÊàêÂäü" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå ÊûÑÂª∫Â§±Ë¥•" -ForegroundColor Red
            throw
        }
      shell: pwsh
      
    - name: ËøêË°åDLLÂÜ≤Á™ÅÊ£ÄÊµã
      run: |
        Write-Host "=== ËøêË°åPython DLLÂÜ≤Á™ÅÊ£ÄÊµãÂô® ===" -ForegroundColor Cyan
        python debug_dll_conflicts.py
      shell: pwsh
      continue-on-error: true
      
    - name: ËøêË°åDLL‰æùËµñÊ£ÄÊü•
      run: |
        Write-Host "=== ËøêË°åPowerShell DLL‰æùËµñÊ£ÄÊü•Âô® ===" -ForegroundColor Cyan
        $detailFlag = if ("${{ github.event.inputs.debug_level }}" -eq "detailed") { "-Detailed" } else { "" }
        $saveFlag = "-SaveReport"
        
        if ($detailFlag) {
            powershell -ExecutionPolicy Bypass -File check_dll_deps.ps1 $detailFlag $saveFlag
        } else {
            powershell -ExecutionPolicy Bypass -File check_dll_deps.ps1 $saveFlag
        }
      shell: pwsh
      continue-on-error: true
      
    - name: ÊµãËØïwannier-toolsÂü∫Êú¨ÂäüËÉΩ
      run: |
        Write-Host "=== ÊµãËØïwannier-toolsÂü∫Êú¨ÂäüËÉΩ ===" -ForegroundColor Cyan
        
        # ÂàõÂª∫ÊµãËØïËæìÂÖ•Êñá‰ª∂
        $testContent = @'
        &CONTROL
        BulkBand_calc = T
        /
        
        &SYSTEM
        NSLAB = 10
        NumOccupied = 18
        SOC = 1
        E_FERMI = 6.6556
        Bmin= -1.0, Bmax= 1.0, Nk1=50
        /
        
        &PARAMETERS
        Eta_Arc = 0.001
        /
        
        LATTICE
        Angstrom
           2.69   0.00   0.00
           0.00   2.69   0.00
           0.00   0.00  10.00
        
        ATOM_POSITIONS
        2
        Direct
        C   0.33333   0.66667   0.50000
        C   0.66667   0.33333   0.50000
        
        PROJECTORS
        2
        C px py pz
        C px py pz
        
        SURFACE
        1 0 0
        0 1 0
        '@
        
        $testContent | Out-File -FilePath "wt_test.in" -Encoding ASCII
        
        # ÊµãËØïÂØºÂÖ•
        try {
            python -c "import wannier_tools; print('wannier_toolsÂØºÂÖ•ÊàêÂäü')"
        } catch {
            Write-Host "wannier_toolsÂØºÂÖ•Â§±Ë¥•" -ForegroundColor Red
        }
        
        # ÊµãËØïÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑
        try {
            $process = Start-Process -FilePath "wt-py.exe" -ArgumentList "" -RedirectStandardInput "wt_test.in" -RedirectStandardOutput "stdout.txt" -RedirectStandardError "stderr.txt" -Wait -PassThru -NoNewWindow
            
            $exitCode = $process.ExitCode
            $stdout = Get-Content "stdout.txt" -Raw -ErrorAction SilentlyContinue
            $stderr = Get-Content "stderr.txt" -Raw -ErrorAction SilentlyContinue
            
            Write-Host "ËøõÁ®ãÈÄÄÂá∫Á†Å $exitCode"
            
            if ($exitCode -eq 0) {
                Write-Host "wt-py.exe ËøêË°åÊàêÂäü" -ForegroundColor Green
            } elseif ($exitCode -eq -1073740940) {
                Write-Host "Á°ÆËÆ§Â†ÜÊçüÂùèÈîôËØØ 0xC0000374" -ForegroundColor Red
                Write-Host "Ê†áÂáÜËæìÂá∫ $stdout"
                Write-Host "Ê†áÂáÜÈîôËØØ $stderr"
            } else {
                Write-Host "wt-py.exe ÂºÇÂ∏∏ÈÄÄÂá∫ ‰ª£Á†Å $exitCode" -ForegroundColor Yellow
                Write-Host "Ê†áÂáÜËæìÂá∫ $stdout"
                Write-Host "Ê†áÂáÜÈîôËØØ $stderr"
            }
            
            echo "EXIT_CODE=$exitCode" >> $env:GITHUB_OUTPUT
            
        } catch {
            Write-Host "ËøêË°åwt-py.exeÂ§±Ë¥•" -ForegroundColor Red
            echo "EXIT_CODE=ERROR" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh
      id: test-wt
      
    - name: Êî∂ÈõÜË∞ÉËØï‰ø°ÊÅØ
      if: always()
      run: |
        Write-Host "=== Êî∂ÈõÜË∞ÉËØï‰ø°ÊÅØ ===" -ForegroundColor Cyan
        
        if (Test-Path "WT.out") {
            Write-Host "‚úì ÊâæÂà∞ WT.out Êñá‰ª∂"
            Get-Content "WT.out" | Select-Object -Last 20 | ForEach-Object { Write-Host "  $_" }
        }
        
        try {
            $events = Get-WinEvent -FilterHashtable @{LogName='Application'; Level=2; StartTime=(Get-Date).AddMinutes(-10)} -ErrorAction SilentlyContinue
            if ($events) {
                Write-Host "`n‚ö†Ô∏è  ÂèëÁé∞ÊúÄËøëÁöÑÂ∫îÁî®Á®ãÂ∫èÈîôËØØ‰∫ã‰ª∂:" -ForegroundColor Yellow
                $events | Select-Object -First 5 | ForEach-Object {
                    Write-Host "  Êó∂Èó¥: $($_.TimeCreated), ID: $($_.Id), Ê∂àÊÅØ: $($_.LevelDisplayName)"
                }
            }
        } catch {
            Write-Host "Êó†Ê≥ïËÆøÈóÆ‰∫ã‰ª∂Êó•Âøó" -ForegroundColor Gray
        }
        
        $report = @{
            timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            python_version = python --version
            exit_code = "${{ steps.test-wt.outputs.EXIT_CODE }}"
            os_info = Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, TotalPhysicalMemory
            path_dirs = ($env:PATH -split ';')[0..9]
        }
        
        $report | ConvertTo-Json -Depth 3 | Out-File -FilePath "debug_report.json"
      shell: pwsh
      
    - name: ‰∏ä‰º†Ë∞ÉËØïÊä•Âëä
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dll-debug-reports-py${{ matrix.python-version }}
        path: |
          dll_conflict_report.json
          dll_check_report_*.txt
          debug_report.json
          WT.out
          stdout.txt
          stderr.txt
        retention-days: 30
        
    - name: ‰∏ä‰º†ÊûÑÂª∫Êó•Âøó
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-py${{ matrix.python-version }}
        path: |
          build/
          *.log
        retention-days: 7

  analyze-results:
    name: ÂàÜÊûêÁªìÊûúÂπ∂ÁîüÊàêÊä•Âëä
    runs-on: ubuntu-latest
    needs: windows-dll-analysis
    if: always()
    
    steps:
    - name: Ê£ÄÂá∫‰ª£Á†Å
      uses: actions/checkout@v4
      
    - name: ‰∏ãËΩΩÊâÄÊúâË∞ÉËØïÊä•Âëä
      uses: actions/download-artifact@v4
      with:
        pattern: dll-debug-reports-*
        merge-multiple: true
        path: reports/
        
    - name: ÂàÜÊûêÁªìÊûú
      run: |
        echo "## üîç Windows DLLÂÜ≤Á™ÅÊ£ÄÊµãÁªìÊûú" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "reports" ] && [ "$(ls -A reports/)" ]; then
          echo "### üìã Ê£ÄÊµãÂà∞ÁöÑÊñá‰ª∂:" >> $GITHUB_STEP_SUMMARY
          ls -la reports/ >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for report in reports/debug_report.json; do
            if [ -f "$report" ]; then
              echo "### üìä ÊµãËØïÁªìÊûú:" >> $GITHUB_STEP_SUMMARY
              exit_code=$(jq -r '.exit_code // "unknown"' "$report")
              python_version=$(jq -r '.python_version // "unknown"' "$report")
              
              echo "- PythonÁâàÊú¨: $python_version" >> $GITHUB_STEP_SUMMARY
              echo "- ÈÄÄÂá∫Á†Å: $exit_code" >> $GITHUB_STEP_SUMMARY
              
              if [ "$exit_code" = "-1073740940" ]; then
                echo "- ‚ùå **Á°ÆËÆ§Â≠òÂú®Â†ÜÊçüÂùèÈóÆÈ¢ò (0xC0000374)**" >> $GITHUB_STEP_SUMMARY
              elif [ "$exit_code" = "0" ]; then
                echo "- ‚úÖ **Á®ãÂ∫èÊ≠£Â∏∏ËøêË°å**" >> $GITHUB_STEP_SUMMARY
              else
                echo "- ‚ö†Ô∏è **Á®ãÂ∫èÂºÇÂ∏∏ÈÄÄÂá∫**" >> $GITHUB_STEP_SUMMARY
              fi
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          if [ -f "reports/dll_conflict_report.json" ]; then
            echo "### üîß DLLÂÜ≤Á™ÅÂàÜÊûê:" >> $GITHUB_STEP_SUMMARY
            conflicts=$(jq '.conflicts | length' reports/dll_conflict_report.json 2>/dev/null || echo "0")
            echo "- Ê£ÄÊµãÂà∞ $conflicts ‰∏™DLLÂÜ≤Á™Å" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
        else
          echo "‚ùå Êú™ÊâæÂà∞Ë∞ÉËØïÊä•ÂëäÊñá‰ª∂" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### üí° Âª∫ËÆÆ:" >> $GITHUB_STEP_SUMMARY
        echo "1. Êü•Áúã‰∏ä‰º†ÁöÑË∞ÉËØïÊä•ÂëäÊñá‰ª∂Ëé∑ÂèñËØ¶ÁªÜ‰ø°ÊÅØ" >> $GITHUB_STEP_SUMMARY
        echo "2. Â¶ÇÊûúÂèëÁé∞DLLÂÜ≤Á™ÅÔºåËØ∑Ê∏ÖÁêÜPATHÁéØÂ¢ÉÂèòÈáè" >> $GITHUB_STEP_SUMMARY
        echo "3. ËÄÉËôë‰ΩøÁî®ÈùôÊÄÅÈìæÊé•ÁâàÊú¨ÈáçÊñ∞ÊûÑÂª∫" >> $GITHUB_STEP_SUMMARY
        echo "4. ÂèÇËÄÉ [DLL_DEBUGGING_README.md](./DLL_DEBUGGING_README.md) Ëé∑ÂèñËØ¶ÁªÜÊåáÂØº" >> $GITHUB_STEP_SUMMARY
      shell: bash
      
    - name: ÂàõÂª∫Issue (Â¶ÇÊûúÊ£ÄÊµãÂà∞ÈóÆÈ¢ò)
      if: contains(needs.windows-dll-analysis.result, 'failure')
      uses: actions/github-script@v7
      with:
        script: |
          const title = `Windows DLLÂÜ≤Á™ÅÊ£ÄÊµãÂèëÁé∞ÈóÆÈ¢ò - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## üîç Ëá™Âä®Ê£ÄÊµãÂà∞Windows DLLÈóÆÈ¢ò
          
          **Ê£ÄÊµãÊó∂Èó¥**: ${new Date().toISOString()}
          **Ëß¶Âèë‰∫ã‰ª∂**: ${{ github.event_name }}
          **ÂàÜÊîØ**: ${{ github.ref }}
          **Êèê‰∫§**: ${{ github.sha }}
          
          ### üìã ÈóÆÈ¢òÊëòË¶Å
          Windows DLLÂÜ≤Á™ÅÊ£ÄÊµãÂ∑•‰ΩúÊµÅÂèëÁé∞‰∫ÜÊΩúÂú®ÈóÆÈ¢ò„ÄÇËØ∑Êü•Áúã‰ª•‰∏ãË∞ÉËØïÊä•ÂëäÔºö
          
          ### üîó Áõ∏ÂÖ≥ÈìæÊé•
          - [Â∑•‰ΩúÊµÅËøêË°å](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Ë∞ÉËØïÂ∑•ÂÖ∑‰ΩøÁî®ÊåáÂçó](./DLL_DEBUGGING_README.md)
          
          ### üìé Ë∞ÉËØïÊä•Âëä
          ËØ∑‰∏ãËΩΩÂπ∂Êü•ÁúãÂ∑•‰ΩúÊµÅ‰∏≠‰∏ä‰º†ÁöÑË∞ÉËØïÊä•ÂëäÊñá‰ª∂Ôºö
          - \`dll_conflict_report.json\` - ËØ¶ÁªÜÁöÑDLLÂÜ≤Á™ÅÂàÜÊûê
          - \`dll_check_report_*.txt\` - PowerShellÊ£ÄÊü•Êä•Âëä
          - \`debug_report.json\` - ÁéØÂ¢É‰ø°ÊÅØÊä•Âëä
          
          ### üõ†Ô∏è Âª∫ËÆÆÁöÑ‰øÆÂ§çÊ≠•È™§
          1. Ê£ÄÊü•PATHÁéØÂ¢ÉÂèòÈáè‰∏≠ÁöÑDLLÂÜ≤Á™Å
          2. È™åËØÅMSYS2/MinGW64Â∑•ÂÖ∑ÈìæÈÖçÁΩÆ
          3. ËÄÉËôëÈáçÊñ∞ÊûÑÂª∫‰ΩøÁî®ÈùôÊÄÅÈìæÊé•
          4. ËøêË°åÊú¨Âú∞Ë∞ÉËØïÂ∑•ÂÖ∑ËøõË°åËøõ‰∏ÄÊ≠•ÂàÜÊûê
          
          /label bug windows dll-conflict
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'windows', 'dll-conflict', 'auto-generated']
          }); 