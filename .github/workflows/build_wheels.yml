name: Build and Test WannierTools Cross-Platform Wheels

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于版本号
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      # Linux: 构建自定义 Docker 镜像
      - name: Build custom Docker image (Linux only)
        if: runner.os == 'Linux'
        run: |
          docker build -t wanniertools-builder-nompi -f build_support/Dockerfile.manylinux-nompi .
      
      # macOS: 安装 Homebrew 依赖
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install gcc openblas arpack
          # 确保gfortran在PATH中
          echo "$(brew --prefix)/bin" >> $GITHUB_PATH
          # 设置编译器环境变量
          echo "FC=$(brew --prefix)/bin/gfortran" >> $GITHUB_ENV
          echo "CC=$(brew --prefix)/bin/gcc" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix)/bin/g++" >> $GITHUB_ENV
          # 验证编译器安装
          which gfortran
          gfortran --version
      
      # Windows: 设置 Visual Studio
      - name: Set up MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        with:
          output-dir: wheelhouse
        # 所有配置都在 pyproject.toml 中，不在这里设置环境变量
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl
  
  test_installation:
    name: Test wheel installation
    needs: build_wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9']  # Only test Python 3.9 since we only build cp39 wheels
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download wheels for ${{ matrix.os }}
        uses: actions/download-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheels
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install wheel
        run: |
          ls -la ./wheels/
          pip install --find-links ./wheels wannier-tools
      
      - name: Test basic functionality
        run: |
          python -c "import wannier_tools; print(f'✅ wannier_tools {wannier_tools.__version__} imported successfully')"
          python -c "import wannier_tools.check_deps; wannier_tools.check_deps.main()"
          wt-check-deps
  
  test_mpi_functionality:
    name: Test MPI functionality (Linux)
    needs: build_wheels
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Linux wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-ubuntu-latest
          path: ./wheels
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Match the wheel Python version
      
      - name: Install MPI for testing
        run: |
          sudo apt-get update
          sudo apt-get install -y openmpi-bin libopenmpi-dev libopenmpi3
          mpirun --version
      
      - name: Install wheel
        run: |
          ls -la ./wheels/
          pip install --find-links ./wheels wannier-tools
      
      - name: Test MPI functionality
        run: |
          cd examples/Haldane_model
          echo "=== 测试单核运行 ==="
          timeout 60 wt-py || echo "单核测试完成(timeout)"
          if [ -f WT.out ]; then
            cores=$(grep "CPU cores" WT.out | tail -1 || echo "未找到CPU cores信息")
            echo "单核结果: $cores"
          fi
          
          echo "=== 测试双核并行 ==="
          rm -f WT.out  # 清理之前的输出
          timeout 60 mpirun -np 2 wt-py || echo "双核测试完成(timeout)"
          if [ -f WT.out ]; then
            cores=$(grep "CPU cores" WT.out | tail -1 || echo "未找到CPU cores信息")
            echo "双核结果: $cores"
          fi
  
  collect_wheels:
    name: Collect all wheels
    needs: [build_wheels, test_installation]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      - name: List all built wheels
        run: |
          echo "🎉 成功构建的wheels:"
          ls -la dist/
          echo ""
          echo "📊 构建统计:"
          echo "Total wheels: $(ls dist/*.whl | wc -l)"
          echo "Linux wheels: $(ls dist/*linux*.whl | wc -l)"
          echo "macOS wheels: $(ls dist/*macos*.whl | wc -l)"
          echo "Windows wheels: $(ls dist/*win*.whl | wc -l)"
      
      - name: Upload all wheels
        uses: actions/upload-artifact@v4
        with:
          name: all-wheels
          path: dist/*.whl
  
  # 注意：发布job被注释掉，等您准备好发布时再启用
  # publish:
  #   name: Publish to PyPI
  #   needs: [collect_wheels]
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #   
  #   steps:
  #     - name: Download all wheels
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: all-wheels
  #         path: dist
  #     
  #     - name: Publish to PyPI
  #       uses: pypa/gh-action-pypi-publish@v1.8.11
  #       with:
  #         password: ${{ secrets.PYPI_API_TOKEN }} 